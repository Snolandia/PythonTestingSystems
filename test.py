import numpy as np
from scipy.optimize import fsolve, least_squares

sqrt = np.emath.sqrt

#f contains 18 equations and 18 variables

def f(vars):
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r
    a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r = vars
    #e = 71.800000
    return ((125-a)**2)+((50-b)**2)+((550-c)**2)-5625.0,((a-d)**2)+((b-e)**2)+((c-f)**2)-3551.2399999999993,((125-g)**2)+((50-h)**2)+((450-i)**2)-5625.0,((g-d)**2)+((h-e)**2)+((i-f)**2)-3551.2399999999993,((125-j)**2)+((90-k)**2)+((550-l)**2)-5625.0,((j-d)**2)+((k-e)**2)+((l-f)**2)-3407.2400000000002,((125-m)**2)+((90-n)**2)+((450-o)**2)-5625.0,((m-d)**2)+((n-e)**2)+((o-f)**2)-3407.2400000000002,((200-p)**2)+((50-q)**2)+((300-r)**2)-22599.999999999996,((p-d)**2)+((q-e)**2)+((r-f)**2)-3215.2399999999993,((a-g)**2)+((b-h)**2)+((c-i)**2)-10000.0,((g-j)**2)+((h-k)**2)+((i-l)**2)-11600.0,((j-m)**2)+((k-n)**2)+((l-o)**2)-10000.0,((m-p)**2)+((n-q)**2)+((o-r)**2)-900.0,((p-a)**2)+((q-b)**2)+((r-c)**2)-10100.0,(d)-(+a+(((((g-a)*.5)+(((((-.21799999999999997)*(((((h-b))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0))))-(((((i-c))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))))))))+(((((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))*(24)))))))),(e)-(+b+(((((h-b)*.5)+(((((-.21799999999999997)*(((((i-c))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0))))-(((((g-a))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))))))))+(((((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))*(24)))))))),(f)-(+c+(((((i-c)*.5)+(((((-.21799999999999997)*(((((g-a))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0))))-(((((h-b))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))))))))+(((((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))*(24))))))))

def f2(vars):
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r
    a,b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r = vars
    #e = 71.800000
    return ((125-a)**2)+((50-b)**2)+((550-c)**2)-5625.0,((a-d)**2)+((b-e)**2)+((c-f)**2)-3551.2399999999993,((125-g)**2)+((50-h)**2)+((450-i)**2)-5625.0,((g-d)**2)+((h-e)**2)+((i-f)**2)-3551.2399999999993,((125-j)**2)+((90-k)**2)+((550-l)**2)-5625.0,((j-d)**2)+((k-e)**2)+((l-f)**2)-3407.2400000000002,((125-m)**2)+((90-n)**2)+((450-o)**2)-5625.0,((m-d)**2)+((n-e)**2)+((o-f)**2)-3407.2400000000002,((200-p)**2)+((50-q)**2)+((300-r)**2)-22599.999999999996,((p-d)**2)+((q-e)**2)+((r-f)**2)-3215.2399999999993,((a-g)**2)+((b-h)**2)+((c-i)**2)-10000.0,((g-j)**2)+((h-k)**2)+((i-l)**2)-11600.0,((j-m)**2)+((k-n)**2)+((l-o)**2)-10000.0,((m-p)**2)+((n-q)**2)+((o-r)**2)-900.0,((p-a)**2)+((q-b)**2)+((r-c)**2)-10100.0,(d)-(+a+(((((g-a)*.5)+(((((-.21799999999999997)*(((((h-b))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0))))-(((((i-c))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))))))))+(((((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))*(24)))))))),(e)-(+b+(((((h-b)*.5)+(((((-.21799999999999997)*(((((i-c))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0))))-(((((g-a))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))))))))+(((((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))*(24)))))))),(f)-(+c+(((((i-c)*.5)+(((((-.21799999999999997)*(((((g-a))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0))))-(((((h-b))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))))))))+(((((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))*(24))))))))

#g contains 18 equations 17 variables

def g(a,b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r):
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r = vars
    e = 71.800000
    return ((125-a)**2)+((50-b)**2)+((550-c)**2)-5625.0,((a-d)**2)+((b-e)**2)+((c-f)**2)-3551.2399999999993,((125-g)**2)+((50-h)**2)+((450-i)**2)-5625.0,((g-d)**2)+((h-e)**2)+((i-f)**2)-3551.2399999999993,((125-j)**2)+((90-k)**2)+((550-l)**2)-5625.0,((j-d)**2)+((k-e)**2)+((l-f)**2)-3407.2400000000002,((125-m)**2)+((90-n)**2)+((450-o)**2)-5625.0,((m-d)**2)+((n-e)**2)+((o-f)**2)-3407.2400000000002,((200-p)**2)+((50-q)**2)+((300-r)**2)-22599.999999999996,((p-d)**2)+((q-e)**2)+((r-f)**2)-3215.2399999999993,((a-g)**2)+((b-h)**2)+((c-i)**2)-10000.0,((g-j)**2)+((h-k)**2)+((i-l)**2)-11600.0,((j-m)**2)+((k-n)**2)+((l-o)**2)-10000.0,((m-p)**2)+((n-q)**2)+((o-r)**2)-900.0,((p-a)**2)+((q-b)**2)+((r-c)**2)-10100.0,(d)-(+a+(((((g-a)*.5)+(((((-.21799999999999997)*(((((h-b))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0))))-(((((i-c))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))))))))+(((((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))*(24)))))))),(e)-(+b+(((((h-b)*.5)+(((((-.21799999999999997)*(((((i-c))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0))))-(((((g-a))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))))))))+(((((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))*(24)))))))),(f)-(+c+(((((i-c)*.5)+(((((-.21799999999999997)*(((((g-a))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0))))-(((((h-b))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))))))))+(((((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))*(24))))))))

def g(vars):
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r
    a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r = vars
    #e = 71.800000
    return ((125-a)**2)+((50-b)**2)+((550-c)**2)-5625.0,((a-d)**2)+((b-e)**2)+((c-f)**2)-3551.2399999999993,((125-g)**2)+((50-h)**2)+((450-i)**2)-5625.0,((g-d)**2)+((h-e)**2)+((i-f)**2)-3551.2399999999993,((125-j)**2)+((90-k)**2)+((550-l)**2)-5625.0,((j-d)**2)+((k-e)**2)+((l-f)**2)-3407.2400000000002,((125-m)**2)+((90-n)**2)+((450-o)**2)-5625.0,((m-d)**2)+((n-e)**2)+((o-f)**2)-3407.2400000000002,((200-p)**2)+((50-q)**2)+((300-r)**2)-22599.999999999996,((p-d)**2)+((q-e)**2)+((r-f)**2)-3215.2399999999993,((a-g)**2)+((b-h)**2)+((c-i)**2)-10000.0,((g-j)**2)+((h-k)**2)+((i-l)**2)-11600.0,((j-m)**2)+((k-n)**2)+((l-o)**2)-10000.0,((m-p)**2)+((n-q)**2)+((o-r)**2)-900.0,((p-a)**2)+((q-b)**2)+((r-c)**2)-10100.0,(d)-(+a+(((((g-a)*.5)+(((((-.21799999999999997)*(((((h-b))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0))))-(((((i-c))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))))))))+(((((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))*(24)))))))),(e)-(+b+(((((h-b)*.5)+(((((-.21799999999999997)*(((((i-c))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0))))-(((((g-a))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))))))))+(((((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))*(24)))))))),(f)-(+c+(((((i-c)*.5)+(((((-.21799999999999997)*(((((g-a))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0))))-(((((h-b))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))))))))+(((((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))*(24))))))))


#H contains 17 equations 17 variables

def h(a,b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r):
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r = vars
    e = 71.800000
    return ((125-a)**2)+((50-b)**2)+((550-c)**2)-5625.0,((a-d)**2)+((b-e)**2)+((c-f)**2)-3551.2399999999993,((125-g)**2)+((50-h)**2)+((450-i)**2)-5625.0,((g-d)**2)+((h-e)**2)+((i-f)**2)-3551.2399999999993,((125-j)**2)+((90-k)**2)+((550-l)**2)-5625.0,((j-d)**2)+((k-e)**2)+((l-f)**2)-3407.2400000000002,((125-m)**2)+((90-n)**2)+((450-o)**2)-5625.0,((m-d)**2)+((n-e)**2)+((o-f)**2)-3407.2400000000002,((200-p)**2)+((50-q)**2)+((300-r)**2)-22599.999999999996,((p-d)**2)+((q-e)**2)+((r-f)**2)-3215.2399999999993,((a-g)**2)+((b-h)**2)+((c-i)**2)-10000.0,((g-j)**2)+((h-k)**2)+((i-l)**2)-11600.0,((j-m)**2)+((k-n)**2)+((l-o)**2)-10000.0,((m-p)**2)+((n-q)**2)+((o-r)**2)-900.0,(d)-(+a+(((((g-a)*.5)+(((((-.21799999999999997)*(((((h-b))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0))))-(((((i-c))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))))))))+(((((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))*(24)))))))),(e)-(+b+(((((h-b)*.5)+(((((-.21799999999999997)*(((((i-c))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0))))-(((((g-a))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))))))))+(((((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))*(24)))))))),(f)-(+c+(((((i-c)*.5)+(((((-.21799999999999997)*(((((g-a))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0))))-(((((h-b))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))))))))+(((((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))*(24))))))))

def h(vars):
    #a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r
    a,b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r = vars
    e = 71.800000
    return ((125-a)**2)+((50-b)**2)+((550-c)**2)-5625.0,((a-d)**2)+((b-e)**2)+((c-f)**2)-3551.2399999999993,((125-g)**2)+((50-h)**2)+((450-i)**2)-5625.0,((g-d)**2)+((h-e)**2)+((i-f)**2)-3551.2399999999993,((125-j)**2)+((90-k)**2)+((550-l)**2)-5625.0,((j-d)**2)+((k-e)**2)+((l-f)**2)-3407.2400000000002,((125-m)**2)+((90-n)**2)+((450-o)**2)-5625.0,((m-d)**2)+((n-e)**2)+((o-f)**2)-3407.2400000000002,((200-p)**2)+((50-q)**2)+((300-r)**2)-22599.999999999996,((p-d)**2)+((q-e)**2)+((r-f)**2)-3215.2399999999993,((a-g)**2)+((b-h)**2)+((c-i)**2)-10000.0,((g-j)**2)+((h-k)**2)+((i-l)**2)-11600.0,((j-m)**2)+((k-n)**2)+((l-o)**2)-10000.0,((m-p)**2)+((n-q)**2)+((o-r)**2)-900.0,(d)-(+a+(((((g-a)*.5)+(((((-.21799999999999997)*(((((h-b))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0))))-(((((i-c))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))))))))+(((((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))*(24)))))))),(e)-(+b+(((((h-b)*.5)+(((((-.21799999999999997)*(((((i-c))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0))))-(((((g-a))*((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))))))))+(((((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0)))*(24)))))))),(f)-(+c+(((((i-c)*.5)+(((((-.21799999999999997)*(((((g-a))*((((i-c)*(p-a))-((g-a)*(r-c)))/(1000.0))))-(((((h-b))*((((h-b)*(r-c))-((i-c)*(q-b)))/(1000.0)))))))))+(((((((g-a)*(q-b))-((h-b)*(p-a)))/(1000.0)))*(24))))))))







#x = f(210,60,560,234,71.8,510,210,60,460,210,100,560,210,100,460,210,70,460)
#y = fsolve(f, (210,60,560,234,71.8,510,210,60,460,210,100,560,210,100,460,210,70,460))
y = fsolve(h, (210,60,560,234,510,210,60,460,210,100,560,210,100,460,210,70,460))
#x = least_squares(f2, (210,60,560,234,510,210,60,460,210,100,560,210,100,460,210,70,460),ftol = 0.000000000000001,xtol = 0.000000000000001,gtol = 0.000000000000001)
#x = f(200,50,550,224,71.8,500,200,50,450,200,90,550,200,90,450,200,60,450)




#print(x)
#print(x.x)

print(y)


""" print(a)
print(b)
print(c)
print(d)
print(e)
print(f)
print(g)
print(h)
print(i)
print(j)
print(k)
print(l)
print(m)
print(n)
print(o)
print(p)
print(q)
print(r) """

#x = g(x.x[0],x.x[1],x.x[2],x.x[3],x.x[4],x.x[5],x.x[6],x.x[7],x.x[8],x.x[9],x.x[10],x.x[11],x.x[12],x.x[13],x.x[14],x.x[15],x.x[16])

#for i in range(17):
#    print("%.20f" % x[i])

for i in range(17):
   print(i , "%.20f" % y[i])

x = [404] * 17

for i in range(17):
   x[i] = y[i]

x = h(x)

print("solving original function")

for i in range(17):
   print(i , ("%.20f" % x[i]))

#print(x)
